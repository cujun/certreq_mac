/* Generated by IDL compiler version FreeDCE 1.1.0.7 with GNU Flex/Bison */
#ifndef rpcbase_v0_0_included
#define rpcbase_v0_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#ifndef lbase_v0_0_included
#include <dce/lbase.h>
#endif
#ifndef rpctypes_v0_0_included
#include <dce/rpctypes.h>
#endif
#ifndef rpc_iovector_v0_0_included
#include <dce/iovector.h>
#endif
#define rpc_s_ok error_status_ok
typedef struct  {
unsigned32 dummy;
} rpcbase_v0_0_0;
typedef rpcbase_v0_0_0 *rpc_opaque_ptr_t;
#define rpc_c_protseq_max_reqs_default (0)
#define rpc_c_listen_max_calls_default (10)
#define rpc_c_call_non_idempotent (0x0)
#define rpc_c_call_brdcst (0x1)
#define rpc_c_call_idempotent (0x2)
#define rpc_c_call_maybe (0x4)
#define rpc_c_binding_min_timeout (0)
#define rpc_c_binding_default_timeout (5)
#define rpc_c_binding_max_timeout (9)
#define rpc_c_binding_infinite_timeout (10)
#define rpc_c_protseq_id_ncacn_ip_tcp (0)
#define rpc_c_protseq_id_ncacn_dnet_nsp (1)
#define rpc_c_protseq_id_ncacn_osi_dna (2)
#define rpc_c_protseq_id_ncadg_ip_udp (3)
#define rpc_c_protseq_id_ncadg_dds (4)
#define rpc_c_protseq_id_ncalrpc (5)
#define rpc_c_protseq_id_ncacn_np (6)
#define rpc_c_protseq_id_ncacn_nb (7)
#define rpc_c_invalid_protseq_id (-1)
typedef struct  {
idl_uuid_t id;
unsigned32 version;
} rpc_syntax_id_t;
typedef rpc_syntax_id_t *rpc_syntax_id_p_t;
typedef void (*rpc_convert_proc_t)(
    void
);
typedef rpc_convert_proc_t *rpc_convert_epv_t;
typedef struct  {
rpc_syntax_id_t id;
unsigned32 index;
rpc_convert_epv_t convert_epv;
} rpc_transfer_syntax_t;
typedef rpc_transfer_syntax_t *rpc_transfer_syntax_p_t;
typedef handle_t rpc_binding_handle_t;
typedef rpc_opaque_ptr_t rpc_call_handle_t;
typedef rpc_call_handle_t *rpc_call_handle_p_t;
typedef rpc_opaque_ptr_t rpc_client_handle_t;
typedef rpc_client_handle_t *rpc_client_handle_p_t;
typedef struct  {
unsigned32 count;
rpc_binding_handle_t binding_h[1];
} rpc_binding_vector_t;
typedef rpc_binding_vector_t *rpc_binding_vector_p_t;
typedef struct  {
unsigned32 count;
unsigned_char_p_t protseq[1];
} rpc_protseq_vector_t;
typedef rpc_protseq_vector_t *rpc_protseq_vector_p_t;
typedef rpc_opaque_ptr_t rpc_if_handle_t;
typedef rpc_if_handle_t *rpc_if_handle_p_t;
typedef struct  {
unsigned32 count;
rpc_if_handle_t if_spec[1];
} rpc_if_handle_vector_t;
typedef rpc_if_handle_vector_t *rpc_if_handle_vector_p_t;
typedef void (*rpc_mgr_proc_t)(
    void
);
typedef rpc_mgr_proc_t *rpc_mgr_epv_t;
typedef void (*rpc_v2_server_stub_proc_t)(
    /* [in] */ handle_t binding_handle,
    /* [in] */ rpc_call_handle_t call_handle,
    /* [in] */ rpc_iovector_elt_p_t in_call_args,
    /* [in] */ ndr_format_p_t remote_ndr_fmt,
    /* [in] */ rpc_transfer_syntax_p_t xfer_syntax,
    /* [in] */ rpc_mgr_epv_t mgr_epv,
    /* [out] */ unsigned32 *st
);
typedef rpc_v2_server_stub_proc_t *rpc_v2_server_stub_epv_t;
typedef void (*rpc_network_rundown_fn_t)(
    /* [in] */ rpc_client_handle_t client_h
);
#define rpc_c_cancel_infinite_timeout (-1)
typedef boolean32 (*rpc_mgmt_authorization_fn_t)(
    /* [in] */ rpc_binding_handle_t binding_handle,
    /* [in] */ unsigned32 requested_mgmt_operation,
    /* [out] */ unsigned32 *status
);
#define rpc_c_mgmt_inq_if_ids (0)
#define rpc_c_mgmt_inq_stats (1)
#define rpc_c_mgmt_is_server_listen (2)
#define rpc_c_mgmt_stop_server_listen (3)
#define rpc_c_mgmt_inq_princ_name (4)
typedef rpc_opaque_ptr_t rpc_ns_handle_t;
typedef rpc_ns_handle_t *rpc_ns_handle_p_t;
#define rpc_c_ns_none (0)
#define rpc_c_ns_dec_dns (1)
#define rpc_c_ns_ms_wins (2)
#define rpc_c_ns_ldap (3)
#define rpc_c_ns_syntax_default (0)
#define rpc_c_ns_syntax_unknown (1)
#define rpc_c_ns_syntax_dec_dns (2)
#define rpc_c_ns_syntax_dce (3)
#define rpc_c_ns_syntax_x500 (4)
#define rpc_c_ns_syntax_internet_dns (5)
#define rpc_c_ns_syntax_uuid (6)
#define rpc_c_ns_syntax_ms_wins (7)
#define rpc_c_ns_syntax_ldap (8)
#define rpc_c_profile_default_elt (1)
#define rpc_c_profile_all_elts (2)
#define rpc_c_profile_match_by_if (3)
#define rpc_c_profile_match_by_mbr (4)
#define rpc_c_profile_match_by_both (5)
#define rpc_c_binding_max_count_default (5)
#define rpc_c_ns_default_exp_age (0xffffffff)
typedef struct  {
unsigned32 count;
twr_p_t tower[1];
} rpc_tower_vector_t;
typedef rpc_tower_vector_t *rpc_tower_vector_p_t;
typedef rpc_opaque_ptr_t rpc_auth_identity_handle_t;
typedef rpc_opaque_ptr_t rpc_transport_info_handle_t;
#define rpc_c_protect_level_default (0)
#define rpc_c_protect_level_none (1)
#define rpc_c_protect_level_connect (2)
#define rpc_c_protect_level_call (3)
#define rpc_c_protect_level_pkt (4)
#define rpc_c_protect_level_pkt_integ (5)
#define rpc_c_protect_level_pkt_privacy (6)
#define rpc_c_authn_none (0)
#define rpc_c_authn_dce_secret (1)
#define rpc_c_authn_dce_public (2)
#define rpc_c_authn_dce_dummy (3)
#define rpc_c_authn_dssa_public (4)
#define rpc_c_authn_gss_negotiate (9)
#define rpc_c_authn_winnt (10)
#define rpc_c_authn_gss_tls (14)
#define rpc_c_authn_gss_mskrb (16)
#define rpc_c_authn_msn (17)
#define rpc_c_authn_dpa (18)
#define rpc_c_authn_netlogon (68)
#define rpc_c_authn_schannel (68)
#define rpc_c_authn_default (0xffffffff)
#define rpc_c_authz_none (0)
#define rpc_c_authz_name (1)
#define rpc_c_authz_dce (2)
#define rpc_c_authz_gss_name (3)
typedef struct  {
unsigned32 magic;
idl_void_p_t data;
} rpc_authz_cred_handle_t;
typedef rpc_authz_cred_handle_t *rpc_authz_cred_handle_p_t;
typedef idl_void_p_t rpc_authz_handle_t;
typedef void (*rpc_auth_key_retrieval_fn_t)(
    /* [in] */ idl_void_p_t arg,
    /* [in] */ unsigned_char_p_t server_princ_name,
    /* [in] */ unsigned32 key_type,
    /* [in] */ unsigned32 key_ver,
    /* [out] */ idl_void_p_t *key,
    /* [out] */ unsigned32 *st
);
typedef void (*rpc_object_inq_fn_t)(
    /* [in] */ uuid_p_t object_uuid,
    /* [out] */ idl_uuid_t *type_uuid,
    /* [out] */ unsigned32 *status
);
#define rpc_c_ep_max_annotation_size (64)
typedef rpc_opaque_ptr_t rpc_ep_inq_handle_t;
typedef rpc_ep_inq_handle_t *rpc_ep_inq_handle_p_t;
typedef rpc_opaque_ptr_t rpc_access_token_p_t;

#ifdef __cplusplus
    }
#endif

#endif
