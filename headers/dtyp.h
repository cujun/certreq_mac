/* Generated by IDL compiler version FreeDCE 1.1.0.7 with GNU Flex/Bison */
#ifndef dtype_v0_0_included
#define dtype_v0_0_included
#ifndef IDL_DOUBLE_USED
#define IDL_DOUBLE_USED
#endif
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif

#if _DCE_IDL_
typedef idl_usmall_int uint8_t;
typedef idl_small_int int8_t;
typedef idl_ushort_int uint16_t;
typedef idl_short_int int16_t;
typedef idl_ulong_int uint32_t;
typedef idl_long_int int32_t;
typedef idl_uhyper_int uint64_t;
typedef idl_hyper_int int64_t;

#else

#include <stdint.h>

#include <stddef.h>

#endif

#ifndef IDL_PROTOTYPES

#define IDL_PROTOTYPES

#endif

#ifndef RPC_C_NP_DIR

#define RPC_C_NP_DIR "/var/rpc/ncacn_np"

#endif
typedef uint8_t __uint8;
typedef int8_t __int8;
typedef uint16_t __uint16;
typedef int16_t __int16;
typedef uint32_t __uint32;
typedef int32_t __int32;
typedef uint64_t __uint64;
typedef int64_t __int64;
typedef uint8_t UINT8;
typedef int8_t INT8;
typedef uint16_t UINT16;
typedef int16_t INT16;
typedef uint32_t UINT32;
typedef int32_t INT32;
typedef uint64_t UINT64;
typedef int64_t INT64;

#if !defined(_utf16_t_DEFINED)

#define  _utf16_t_DEFINED
typedef uint16_t utf16_t;

#endif

#if !defined(_utf8_t_DEFINED)

#define _utf8_t_DEFINED
typedef uint8_t utf8_t;

#endif
//typedef uint32_t BOOL;
typedef uint32_t *PBOOL;
typedef uint32_t *LPBOOL;
typedef uint8_t BYTE;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;
typedef BOOLEAN *LPBOOLEAN;
typedef utf16_t WCHAR;
typedef WCHAR *PWCHAR;
typedef WCHAR *LPWCHAR;
typedef idl_char CHAR;
typedef CHAR *PCHAR;
typedef CHAR *LPCHAR;
typedef uint8_t UCHAR;
typedef UCHAR *PUCHAR;
typedef UCHAR *LUPCHAR;
typedef struct _STRING {
idl_ushort_int Length;
idl_ushort_int MaximumLength;
idl_char *Buffer;
} STRING;
typedef STRING *PSTRING;
typedef int32_t INT;
typedef INT *PINT;
typedef INT *LPINT;
typedef idl_long_int LONG;
typedef LONG *PLONG;
typedef LONG *LPLONG;
typedef uint32_t ULONG;
typedef LONG *PULONG;
typedef LONG *LUPLONG;
typedef uint32_t ULONG32;
typedef ULONG32 *PULONG32;
typedef ULONG32 *LPULONG32;
typedef uint32_t DWORD;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef uint64_t ULONG64;
typedef ULONG64 *PULONG64;
typedef ULONG64 *LPULONG64;
typedef utf16_t UNICODE;
typedef UNICODE *PUNICODE;
typedef UNICODE *LPUNICODE;
typedef idl_ushort_int USHORT;
typedef USHORT *PSHORT;
typedef USHORT *LPSHORT;
typedef idl_ushort_int WORD;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef void VOID;
typedef idl_void_p_t PVOID;
typedef uint32_t DWORD32;
typedef uint64_t DWORD64;
typedef uint64_t ULONGLONG;
typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
typedef idl_long_float DOUBLE;
typedef idl_short_float FLOAT;
typedef idl_short_int SHORT;
typedef DWORD HCALL;
typedef INT64 LONGLONG;
typedef LONG HRESULT;
typedef int32_t LONG32;
typedef int64_t LONG64;
typedef idl_char *PSTR;
typedef idl_char *LPSTR;
typedef utf16_t *PWSTR;
typedef utf16_t *LPWSTR;

#if !defined(_NET_API_STATUS_DEFINED)

#define _NET_API_STATUS_DEFINED
typedef DWORD NET_API_STATUS;

#endif

#if !defined(_NTSTATUS_DEFINED)

#define _NTSTATUS_DEFINED
typedef uint32_t NTSTATUS;

#endif

#if !defined(_WERROR_DEFINED)

#define _WERROR_DEFINED
typedef uint32_t WERROR;

#endif
typedef uint64_t QWORD;
typedef uint64_t TIME;
typedef struct _FILETIME {
DWORD dwLowDateTime;
DWORD dwHighDateTime;
} FILETIME;
typedef FILETIME *PFILETIME;
typedef FILETIME *LPFILETIME;
typedef struct _GUID {
idl_ulong_int Data1;
idl_ushort_int Data2;
idl_ushort_int Data3;
idl_byte Data4[8];
} GUID;
typedef GUID UUID;
typedef GUID *PGUID;
typedef GUID *LPGUID;
typedef struct _LUID {
uint32_t LowPart;
uint32_t HighPart;
} LUID;
typedef LUID *PLUID;
typedef struct _LARGE_INTEGER {
uint64_t QuadPart;
} LARGE_INTEGER;
typedef LARGE_INTEGER *PLARGE_INTEGER;
typedef LARGE_INTEGER *LPLARGE_INTEGER;
typedef struct _OLD_LARGE_INTEGER {
ULONG LowPart;
idl_long_int HighPart;
} OLD_LARGE_INTEGER;
typedef OLD_LARGE_INTEGER *POLD_LARGE_INTEGER;
typedef DWORD LCID;
typedef struct _RPC_UNICODE_STRING {
idl_ushort_int Length;
idl_ushort_int MaximumLength;
WCHAR *Buffer;
} RPC_UNICODE_STRING;
typedef RPC_UNICODE_STRING *PRPC_UNICODE_STRING;
typedef RPC_UNICODE_STRING *LPRPC_UNICODE_STRING;
typedef RPC_UNICODE_STRING UNICODE_STRING;
typedef UNICODE_STRING *PUNICODE_STRING;
typedef UNICODE_STRING *LPUNICODE_STRING;
typedef struct _SYSTEMTIME {
WORD wYear;
WORD wMonth;
WORD wDayOfWeek;
WORD wDay;
WORD wHour;
WORD wMinute;
WORD wSecond;
WORD wMilliseconds;
} SYSTEMTIME;
typedef SYSTEMTIME *PSYSTEMTIME;
typedef SYSTEMTIME *LPSYSTEMTIME;
typedef struct _UINT128 {
UINT64 lower;
UINT64 upper;
} UINT128;
typedef UINT128 *PUINT128;
typedef UINT128 *LPUINT128;
typedef struct _ULARGE_INTEGER {
uint64_t QuadPart;
} ULARGE_INTEGER;
typedef ULARGE_INTEGER *PULARGE_INTEGER;
typedef ULARGE_INTEGER *LPULARGE_INTEGER;
typedef struct _RPC_SID_IDENTIFIER_AUTHORITY {
BYTE Value[6];
} RPC_SID_IDENTIFIER_AUTHORITY;
typedef DWORD SECURITY_INFORMATION;
typedef SECURITY_INFORMATION *PSECURITY_INFORMATION;
typedef SECURITY_INFORMATION *LPSECURITY_INFORMATION;
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
typedef ACCESS_MASK *LPACCESS_MASK;
typedef struct _RPC_SID {
uint8_t Revision;
uint8_t SubAuthorityCount;
RPC_SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
idl_ulong_int SubAuthority[1];
} RPC_SID;
typedef RPC_SID *PRPC_SID;
typedef RPC_SID *LPRPC_SID;
typedef enum {SecurityAnonymous = 0,
SecurityIdentification = 1,
SecurityImpersonation = 2,
SecurityDelegation = 3} SECURITY_IMPERSONATION_LEVEL;
typedef SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;
typedef enum {TokenPrimary = 1,
TokenImpersonation = 2} TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;
typedef uint16_t SECURITY_DESCRIPTOR_CONTROL;
typedef SECURITY_DESCRIPTOR_CONTROL *PSECURITY_DESCRIPTOR_CONTROL;
typedef enum {SidTypeUser = 1,
SidTypeGroup = 2,
SidTypeDomain = 3,
SidTypeAlias = 4,
SidTypeWellKnownGroup = 5,
SidTypeDeletedAccount = 6,
SidTypeInvalid = 7,
SidTypeUnknown = 8,
SidTypeComputer = 9,
SidTypeLabel = 10} SID_NAME_USE;
typedef SID_NAME_USE *PSID_NAME_USE;

#ifdef __cplusplus
    }
#endif

#endif
